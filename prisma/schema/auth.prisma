enum Role {
    admin
    user
}

model User {
    id         String       @id @default(cuid())
    username   String       @unique
    password   String
    email      String       @unique
    role       Role         @default(user)
    TeamMember TeamMember[]

    emailVerified    Boolean @default(false)
    twoFactorEnabled Boolean @default(false)
    twoFactorToken   String?

    habboVerifiedUsername          String?
    habboVerifiedUsernameUpdatedAt DateTime?

    sessions                      Session[]
    EmailVerificationToken        EmailVerificationToken[]
    PasswordResetToken            PasswordResetToken[]
    HabboAccountVerificationToken HabboAccountVerificationToken[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Session {
    id     String @id
    userId String

    createdAt DateTime @default(now())
    expiresAt DateTime
    updatedAt DateTime @updatedAt

    user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model EmailVerificationToken {
    id     String @id @default(cuid())
    code   String
    email  String
    userId String

    createdAt DateTime @default(now())
    expiresAt DateTime
    updatedAt DateTime @updatedAt

    user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model PasswordResetToken {
    id     String @id @default(cuid())
    token  String @unique
    userId String

    expiresAt DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model HabboAccountVerificationToken {
    id     String @id @default(cuid())
    token  String @unique
    userId String @unique

    verifyingUsername String

    expiresAt DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
