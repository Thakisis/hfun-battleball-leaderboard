enum Role {
    user
    admin
}

model User {
    id            String    @id @default(cuid())
    name          String?
    username      String?   @unique
    email         String?   @unique
    password      String?
    emailVerified DateTime?
    image         String?
    role          Role      @default(user)
    habboId       String?   @unique

    accounts          Account[]
    Authenticator     Authenticator[]
    habboVerification HabboUserVerification?

    createdAt            DateTime            @default(now())
    updatedAt            DateTime            @updatedAt
    PasswordResetToken   PasswordResetToken? @relation(fields: [passwordResetTokenId], references: [id])
    passwordResetTokenId String?
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String  @unique
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    refresh_token_expires_in Int?
    user                     User?   @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model VerificationToken {
    identifier String   @unique
    token      String
    expires    DateTime

    @@id([identifier])
}

model PasswordResetToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime
    User    User[]

    @@unique([email, token])
}

model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

model HabboUserVerification {
    id               String    @id @default(cuid())
    userId           String    @unique
    isVerified       Boolean   @default(false)
    verifiedName     String?
    verificationDate DateTime?
    user             User      @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
